
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>
#include <time.h>
#include <conio.h>
struct customerDet{
		 int nic;
		 int cusID;
		 char firstname[20];
		 char lastname[30];
		 char address[100];
		 int age;
		 char gender; 
		 char lstatus;
		 char type;
		 float amount;
		 char duration[30];
		struct customerDet *nextPtr;
};


typedef struct customerDet customer;
typedef customer *customerPtr;

struct LoanAp{
		int nic;
		 int cusID;
		 char firstname[20];
		 char lastname[30];
		 char address[100];
		 int age;
		 char gender; 
		 char lstatus;
		 char type;
		float amount;
		 char duration[30];
		 struct LoanAp *next;
};

typedef struct LoanAp Loan;
typedef Loan *loanApply;

struct rejectApprove{
		int nic;
		 int cusID;
		 char firstname[20];
		 char lastname[30];
		 char address[100];
		 int age;
		 char gender; 
		 char lstatus;
		 char type;
		 float amount;
		 char duration[30];
		 struct rejectApprove *next;
};

typedef struct rejectApprove regAp;
typedef regAp *regApPt;

void instructions(void);
void insert(customerPtr *sPtr,int id,char frst[20],char lst[30],char adrs[100],char gend,int ag,int cid,char lstatus);
void applyLoan(customerPtr *sPtr,loanApply *headPtr, loanApply *tailPtr,int id);
void rejectApprove(loanApply *headPtr,loanApply *tailPtr,regApPt *topPtr);
void updatestatus(regApPt *topPtr,customerPtr *sPtr);
int remove(customerPtr *sPtr, int id);
void update(customerPtr *sPtr, int id,char ad[100]);
void viewCustomer(customerPtr *sPtr, int id);
int linearSearch(const int array[],int key,int size);
void bubbleSort( int a[],int size);
int binarySearch(const int a[],int key,int low,int high);
void printList( customerPtr currentPtr );
void printArray(int a[]);
int isEmpty( customerPtr sPtr );
int isEmptyQueue( loanApply headPtr );
void printList( loanApply currentPtr );
void printList( regApPt currentPtr );
void printAll( customerPtr currentPtr );
void printListCmplt( customerPtr currentPtr );
void printListDlt( customerPtr currentPtr );
void printPending(customerPtr currentPtr);
void printRejected(customerPtr currentPtr);
void printApproved(customerPtr currentPtr);
int main(){

	int option,id,r,n,j,CID,removeNIC;
	int nic[100]={0}; 
	int cID[100]={0};
	int temp,status,exit;
	int a=0;
	int i=0;
	char fname[20];char lname[30];char ad[100];char ag;char gen;char stat;char type;int amnt;char due[30];
	char decision;
	customerPtr strtPtr=NULL;
	loanApply headPtr=NULL;
	loanApply tailPtr=NULL;
	regApPt start=NULL;
	srand( time( NULL ) );
	instructions();
	printf("?");
	scanf("%d",&option);
	while(option!=12){
	
		switch (option)
		{
			

		case 1:
			int k,m;
			printf("Enter Customer NIC(numbers only):");
			status=scanf("%d",&id);
			while(status!=1){//checks whether the scanf recieves an integer input.reference
			while((temp=getchar()) != EOF && temp != '\n');//gets rid of the newline generated by the enter key
			printf("Invalid input... please enter a number!\n");
			printf("Enter customer NIC(numbers only):");
			status = scanf("%d", &id);
			}
			j=linearSearch(nic,id,100);

			if(j==-1){
			nic[i]=id;
			i++;
			r=1+(rand()%100);
			n=linearSearch(cID,r,100);
			if(n==-1){
			cID[a]=r;
			a++;
			}
			else{
				while(n!=-1){
				r=1+(rand()%100);
				n=linearSearch(cID,r,100);
				if(n==-1)
					break;
				}
				cID[a]=r;
				a++;
			
			}
			bubbleSort(nic,100);
			bubbleSort(cID,100);
			printf("Enter First Name: ");
			scanf("\n%20[^\n]",fname);
			printf("Enter Last Name:  ");
			scanf("\n%30[^\n]",lname);
			printf("Enter Address:    ");
			scanf("\n%100[^\n]",ad);//reads the next 100 characters till it arrives at a new line
			printf("Enter Your Gender(M/F): ");
			scanf("\n%c",&gen);
			printf("Enter Age: ");
			status=scanf("%d",&ag);
			while(status!=1){
			while((temp=getchar()) != EOF && temp != '\n');
			printf("Invalid input... please enter a number!\n");
			printf("Enter age:");
			status = scanf("%d", &ag);
			}
			printf("Enter Loan Status(N for new customers):");
			scanf("\n%c",&stat);
			printf("\n");
			printf("%5s   |  %s  |  %s   |%10s |  %5s  | %2s  | %5s  |%5s  |\n" ,"NIC","FNAME","LNAME","ADDRESS","GENDER","AGE","CSTMRID","STATUS");
			printf("--------------------------------------------------------------------------------");
			insert(&strtPtr,id,fname,lname,ad,gen,ag,r,stat);
			//printArray(nic);
			//printArray(cID);
			printList(strtPtr);

			}
			else{ 
			
				printf("Customer already in the system!\n");
			
			}

			break;

		case 2:

			if(!isEmpty(strtPtr)){
			printf("Enter customer ID to be deleted:");
			status=scanf("%d",&CID);
			while(status!=1){
			while((temp=getchar()) != EOF && temp != '\n');
			printf("Invalid input... please enter a number!\n");
			printf("Enter customer ID:");
			status = scanf("%d", &CID);
			}
			while((binarySearch(cID,CID,0,99))==-1){
				printf("Invalid ID!\n");
				printf("\n\n%15s   |  %10s  |  %20s   |%10s |%s\n" ,"NIC","FNAME","LNAME","CSTMRID","STATUS");
				printf("--------------------------------------------------------------------------------");
				printListDlt(strtPtr);
				printf("\n");
				printf("Enter 1 to to insert new ID or 2 to exit the option:");
				scanf("%d",&exit);
				if(exit==2)
				break;
				else
				if(exit==1){
					printf("Enter customer ID:");
					status=scanf("%d",&CID);
					while(status!=1){
					while((temp=getchar()) != EOF && temp != '\n');
					printf("Invalid input... please enter a number!\n");
					printf("Enter customer ID:");
					status = scanf("%d", &CID);
					}
				}
				
					
            }
			if((binarySearch(cID,CID,0,99))!=-1){
				removeNIC=remove(&strtPtr,CID);
				//printf("%d\n",removeNIC);
				if(removeNIC){
				n=linearSearch(cID,CID,100);
				cID[n]=0;
				a--;
				bubbleSort(cID,100);
				j=linearSearch(nic,removeNIC,100);
				nic[j]=0;
				i--;
				}
				bubbleSort(nic,100);
				printf("\n\n%15s   |  %10s  |  %20s   |%10s |%s\n" ,"NIC","FNAME","LNAME","CSTMRID","STATUS");
				printf("--------------------------------------------------------------------------------");
				printListDlt(strtPtr);
				//printArray(cID);
				//printArray(nic);
			}

	}
			else
				printf("No records available!\n");

			break;

		case 3:

			if(!isEmpty(strtPtr)){
			printf("Enter customer ID:");
			status=scanf("%d",&CID);
			while(status!=1){
			while((temp=getchar()) != EOF && temp != '\n');
			printf("Invalid input... please enter a number!\n");
			printf("Enter customer ID:");
			status = scanf("%d", &CID);
			}
			while((binarySearch(cID,CID,0,99))==-1){
				printf("Invalid ID!\n");
				printf("\n\n%15s   |  %10s  |  %20s   |%10s |%s\n" ,"NIC","FNAME","LNAME","CSTMRID","STATUS");
				printf("--------------------------------------------------------------------------------");
				printListDlt(strtPtr);
				printf("\n");
				printf("Enter 1 to to insert new ID or 2 to exit the option:");
				scanf("%d",&exit);
				if(exit==2)
				break;
				else
				if(exit==1){
					printf("Enter customer ID:");
					status=scanf("%d",&CID);
					while(status!=1){
					while((temp=getchar()) != EOF && temp != '\n');
					printf("Invalid input... please enter a number!\n");
					printf("Enter customer ID:");
					status = scanf("%d", &CID);
					}
				}
				
					
            }
			if((binarySearch(cID,CID,0,99))!=-1){
			printf("Enter address: ");
			scanf("\n%100[^\n]",ad);
			update(&strtPtr,CID,ad);
		
				}
			
		
			}

			else
				printf("No records available!\n");
			break;


		case 4:
			if(!isEmpty(strtPtr)){
			printf("Enter customer ID:");
			status=scanf("%d",&CID);
			while(status!=1){
			while((temp=getchar()) != EOF && temp != '\n');
			printf("Invalid input... please enter a number!\n");
			printf("Enter customer ID:");
			status = scanf("%d", &CID);
			}
			while((binarySearch(cID,CID,0,99))==-1){
				printf("Invalid ID!\n");
				
				printf("\n");
				printf("Enter 1 to to insert new ID or 2 to exit the option:");
				scanf("%d",&exit);
				if(exit==2)
				break;
				else
				if(exit==1){
					printf("Enter customer ID:");
					status=scanf("%d",&CID);
					while(status!=1){
					while((temp=getchar()) != EOF && temp != '\n');
					printf("Invalid input... please enter a number!\n");
					printf("Enter customer ID:");
					status = scanf("%d", &CID);
					}
				}
            }
			if((binarySearch(cID,CID,0,99))!=-1){
				viewCustomer(&strtPtr,CID);
			}
			
			}
			else
				printf("No records available!\n");
			break;

		case 5:
			if(!isEmpty(strtPtr)){
			printf("Enter Y to proceed/CNTL+Z to exit: ");
			while((decision=getchar())!=EOF){
			switch(decision){
			case 'Y':
			case 'y':
			printf("\n");
			printf("Enter customer ID:");
			status=scanf("%d",&CID);
			while(status!=1){
			while((temp=getchar()) != EOF && temp != '\n');
			printf("Invalid input... please enter a number!\n");
			printf("Enter customer ID:");
			status = scanf("%d", &CID);
			}
			while((binarySearch(cID,CID,0,99))==-1){
				printf("Invalid ID!\n");
				printf("\n\n%15s   |  %10s  |  %20s   |%10s |%s\n" ,"NIC","FNAME","LNAME","CSTMRID","STATUS");
				printf("--------------------------------------------------------------------------------");
				printListDlt(strtPtr);
				printf("\n");
				printf("Enter 1 to to insert new ID or 2 to exit the option:");
				scanf("%d",&exit);
				if(exit==2)
				break;
				else
				if(exit==1){
					printf("Enter customer ID:");
					status=scanf("%d",&CID);
					while(status!=1){
					while((temp=getchar()) != EOF && temp != '\n');
					printf("Invalid input... please enter a number!\n");
					printf("Enter customer ID:");
					status = scanf("%d", &CID);
					}
				}
            }
			if((binarySearch(cID,CID,0,99))!=-1){
		
			applyLoan(&strtPtr,&headPtr,&tailPtr,CID);
			printf("\n");
			printf("The pending customers are:\n\n");
			printf("%10s  |%5s  |%5s  |%5s  |%10s  |%10s\n","NIC","CSTMR_ID","STATUS","TYPE","AMOUNT","DURATION");
			printf("--------------------------------------------------------------------------------\n\n");
			printList(headPtr);
			printf("The updated customer records are:\n\n");
			printf("%10s  |%5s  |%5s  |%5s  |%10s  |%10s\n","NIC","CSTMR_ID","STATUS","TYPE","AMOUNT","DURATION");
			printf("--------------------------------------------------------------------------------\n\n");
			printListCmplt(strtPtr);
			printf("\nEnter Y to proceed/CNTL+Z to exit: ");
			break;
			case '\n':
			case '\t':
			case ' ':
			break;

			default:
				printf("\nInvalid Entry!");
				break;
			  }
			 }
			}
			}
			else
				printf("No records available!\n");
			break;

		case 6:
			if(!isEmpty(strtPtr)){
				printf("Enter Y to proceed/CNTL+Z to exit: ");
				while((decision=getchar())!=EOF){
				switch(decision){
				case 'Y':
				case 'y':
				printf("\n");
				rejectApprove(&headPtr,&tailPtr,&start);
				printf("\nEnter Y to proceed/CNTL+Z to exit: ");
				break;
				case '\n':
				case '\t':
				case ' ':
				break;

				default:
					printf("\nInvalid Entry!");
					break;
				}
				}

		
			printf("\nThe pending customers are:\n\n");
			printf("%10s  |%5s  |%5s  |%5s  |%10s  |%10s\n\n","NIC","CSTMR_ID","STATUS","TYPE","AMOUNT","DURATION");
			printf("--------------------------------------------------------------------------------\n");
			printList(headPtr);

			}
			else
				printf("No records available!\n");
			break;
		case 7:
			updatestatus(&start,&strtPtr);
			break;
		case 8:
			if(!isEmpty(strtPtr)){
			printf("\n%10s   |%20s   |%20s   |%17s\n","CSTMR_ID","FNAME","LNAME","AMOUNT");
			printf("--------------------------------------------------------------------------------\n");
			printApproved(strtPtr);
			}
			else
				printf("No records available!\n");
			break;
		case 9:
			if(!isEmpty(strtPtr)){
			printf("\n%10s   |%20s   |%20s   |%17s\n","CSTMR_ID","FNAME","LNAME","AMOUNT");
			printf("--------------------------------------------------------------------------------\n");
			printPending(strtPtr);
			}
			else
				printf("No records available!\n");
			break;
		case 10:
			if(!isEmpty(strtPtr)){
			printf("\n%10s   |%20s   |%20s   |%17s\n","CSTMR_ID","FNAME","LNAME","AMOUNT");
			printf("--------------------------------------------------------------------------------\n");
			printRejected(strtPtr);
			}
			else
				printf("No records available!\n");
			break;
		case 11:
			if(!isEmpty(strtPtr)){
			printf("\n%10s   |%30s   |%30s   \n","CSTMR_ID","FNAME","LNAME");
			printf("--------------------------------------------------------------------------------\n");
			printAll(strtPtr);
			}
			else
				printf("No records available!\n");
			break;
		default:
		 printf( "Invalid choice.\n\n" );
		 instructions();
			break;
		}
		printf( "? " );
		scanf( "%d", &option );
	}
		 printf( "End of run.\n" );
		 scanf("%d",&j);
			 return 0;

}

void instructions(void){
	 printf("Enter Your Option:\n"
		 "Enter 1 to Insert a Customer Record:\n"
		 "Enter 2 to Delete a Customer Record:\n"
		 "Enter 3 to update Address:\n"
		 "Enter 4 to view a specific customer record:\n"
		 "Enter 5 to apply for a loan (Housing/Business/Personal): \n"
		 "Enter 6 to approve or reject a loan:\n"
		 "Enter 7 to update main records:\n"
		 "Enter 8 to view loan approved customers:\n"
		 "Enter 9 to view approval awaiting customers:\n"
		 "Enter 10 to view rejected customers:\n"
		 "Enter 11 to view all customers:\n"
		 "Enter 12 to exit application\n");

}
void insert(customerPtr *sPtr,int id,char frst[20],char lst[30],char adrs[100],char gend,int ag,int cid,char lstatus){

	 customerPtr newPtr;
	 customerPtr currentPtr;
	 customerPtr previousPtr;
	 customerPtr hold;
	 char due[30]={'\0'};
	 newPtr = (customer*) malloc(sizeof(customer));


	 if ( newPtr != NULL ) { 
	
	
	newPtr->nic = id; 
	strncpy(newPtr->firstname,strupr(frst),20);
	strncpy(newPtr->lastname,strupr(lst),30);
	strncpy(newPtr->address,strupr(adrs),100);
	newPtr->age=ag;
	newPtr->gender=toupper(gend);
	newPtr->lstatus=toupper(lstatus);
	newPtr->cusID=cid;
	newPtr->type=NULL;
	newPtr->amount=NULL;
	strncpy(newPtr->duration,due,30);
	newPtr->nextPtr = NULL;

	previousPtr = NULL;
	currentPtr = *sPtr;
	
	while ( currentPtr != NULL && cid > currentPtr->cusID ) {
	previousPtr = currentPtr; 
	currentPtr = currentPtr->nextPtr; 
}


	if ( previousPtr == NULL ) {
	newPtr->nextPtr = *sPtr;
	*sPtr = newPtr;
	
	} 
	 else { 
	 previousPtr->nextPtr = newPtr;
	 newPtr->nextPtr = currentPtr;
	 }
	 
	
	 }
	 else {
	 printf( "%d not inserted. No memory available.\n", id );
	 } 
}

int remove(customerPtr *sPtr, int id){

	customerPtr currentPtr;
	customerPtr previousPtr;
	customerPtr tempPtr;
	int natID;
	char stat='A';
	char stat2='P';
	
	if(id==(*sPtr)->cusID){
		if(stat!=(*sPtr)->lstatus && stat2!=(*sPtr)->lstatus){
		natID=(*sPtr)->nic;
		tempPtr=*sPtr;
		*sPtr=(*sPtr)->nextPtr;
		free(tempPtr);
		printf("Deletion complete!\n");
		return natID;
		}

		else{
		
			printf("Cannot unregister.Customer has acquired/requested loan!\n");
			return '\0';

		
		}
	}
	else{
	previousPtr=*sPtr;
	currentPtr=(*sPtr)->nextPtr;
	

	while(currentPtr!=NULL && currentPtr->cusID != id){
	previousPtr=currentPtr;
	currentPtr=currentPtr->nextPtr;
	}

	if(currentPtr != NULL){
		if(stat!=currentPtr->lstatus && stat2!=currentPtr->lstatus){
		natID=currentPtr->nic;
		tempPtr = currentPtr;
		previousPtr->nextPtr = currentPtr->nextPtr;
		free(tempPtr);
		printf("Deletion complete!\n");
		return natID;
		}

		else{
		
			printf("Cannot unregister.Customer has acquired/requested loan!\n");
			return '\0';
		
			}
		}
	
	}

	 

	

	return '\0';
}



void update(customerPtr *sPtr, int id,char ad[100]){

	customerPtr currentPtr;
	customerPtr previousPtr;



		if(id==(*sPtr)->cusID){
		
			strncpy((*sPtr)->address,strupr(ad),100);
			
			viewCustomer(sPtr,(*sPtr)->cusID);
		
		}

		else{
		previousPtr=*sPtr;
		currentPtr=(*sPtr)->nextPtr;

		while(currentPtr!=NULL && currentPtr->cusID != id){
		previousPtr=currentPtr;
		currentPtr=currentPtr->nextPtr;
		}
		if(currentPtr != NULL){
		
		strncpy(currentPtr->address,strupr(ad),100);
		
		viewCustomer(&currentPtr,currentPtr->cusID);
		
			}
		
		}
	
	
	



}


void applyLoan(customerPtr *sPtr,loanApply *headPtr,loanApply *tailPtr,int id){

	customerPtr currentPtr;
	customerPtr previousPtr;
	loanApply  newPt;
	char stat='A';
	char type;
	float amnt;
	int status,temp;
	char due[30];


		
	if(id==(*sPtr)->cusID){
		if((*sPtr)->lstatus!=stat){
			printf("Enter Loan Type(H/B/P):");
			scanf("\n%c",&type);
			printf("Enter Amount:");
			status=scanf("%f",&amnt);
		
			while(status!=1){
			while((temp=getchar()) != EOF && temp != '\n');
			printf("Invalid input... please enter a number!\n");
			printf("Enter Amount:");
			status = scanf("%f", &amnt);
			}
			printf("Enter Duration:");
			scanf("%s",due);
			(*sPtr)->type=toupper(type);
			(*sPtr)->amount=amnt;
			strncpy((*sPtr)->duration,strupr(due),30);
			(*sPtr)->lstatus='P';
			newPt = (Loan*)malloc(sizeof(Loan));
			if(newPt!=NULL){
			
				newPt->nic=(*sPtr)->nic; 
				newPt->cusID=(*sPtr)->cusID;
				strncpy(newPt->firstname,(*sPtr)->firstname,20);
				strncpy(newPt->lastname,(*sPtr)->lastname,30);
				strncpy(newPt->address,(*sPtr)->address,100);
				newPt->age=(*sPtr)->age;
				newPt->gender=(*sPtr)->gender;
				newPt->lstatus=(*sPtr)->lstatus;
				newPt->type=(*sPtr)->type;
				newPt->amount=(*sPtr)->amount;
				strncpy(newPt->duration,(*sPtr)->duration,30);
				newPt->next=NULL;

				if(isEmptyQueue(*headPtr)){
					*headPtr=newPt;
				}
				else{
					(*tailPtr)->next=newPt;
				}
				*tailPtr=newPt;

			}
			else
				printf("No memory available!");
		
		}

		else
			printf("Customer already acquired a loan from the bank!");
			
	}
	else{
	
		previousPtr=*sPtr;
		currentPtr=(*sPtr)->nextPtr;

		while(currentPtr!=NULL && currentPtr->cusID != id){
		previousPtr=currentPtr;
		currentPtr=currentPtr->nextPtr;
		}
		if(currentPtr != NULL){
			if(currentPtr->lstatus!=stat){
			printf("Enter Loan Type(H/B/P):");
			scanf("\n%c",&type);
			printf("Enter Amount:");
			status=scanf("%f",&amnt);
			while(status!=1){
			while((temp=getchar()) != EOF && temp != '\n');
			printf("Invalid input... please enter a number!\n");
			printf("Enter Amount:");
			status = scanf("%f", &amnt);
			}
			printf("Enter Duration:");
			scanf("%s",due);
			currentPtr->type=toupper(type);
			currentPtr->amount=amnt;
			strncpy(currentPtr->duration,strupr(due),30);
			currentPtr->lstatus='P';
			newPt = (Loan*)malloc(sizeof(Loan));
			if(newPt!=NULL){
			
				newPt->nic=currentPtr->nic; 
				newPt->cusID=currentPtr->cusID;
				strncpy(newPt->firstname,currentPtr->firstname,20);
				strncpy(newPt->lastname,currentPtr->lastname,30);
				strncpy(newPt->address,currentPtr->address,100);
				newPt->age=currentPtr->age;
				newPt->gender=currentPtr->gender;
				newPt->lstatus=currentPtr->lstatus;
				newPt->type=currentPtr->type;
				newPt->amount=currentPtr->amount;
				strncpy(newPt->duration,currentPtr->duration,30);
				newPt->next=NULL;

				if(isEmptyQueue(*headPtr))
					*headPtr=newPt;
				else
					(*tailPtr)->next=newPt;

				*tailPtr=newPt;

			}
			else
				printf("No memory available!");
		
		  }
			else
			printf("Customer already acquired a loan from the bank!");
				}
		else
			printf("ID not found!");

			
			
		}
		
	}
	
	void rejectApprove(loanApply *headPtr,loanApply *tailPtr,regApPt *topPtr){
	printf("%10s  |%5s  |%5s  |%5s  |%10s  |%10s\n\n","NIC","CSTMR_ID","STATUS","TYPE","AMOUNT","DURATION");
	printf("--------------------------------------------------------------------------------\n");
	printList(*headPtr);
	
	char stat;
	loanApply tempPtr;
	regApPt temp;
	
	if(!isEmptyQueue(*headPtr)){
	printf("Enter The Loan Status: ");
	scanf("\n%c",&stat);
	
    ( *headPtr )->lstatus=toupper(stat);

	regApPt newPtr;
	newPtr=(regAp*)malloc(sizeof(regAp));
	if(newPtr!=NULL){
	newPtr->nic=(*headPtr)->nic;
	newPtr->cusID=(*headPtr)->cusID;
	strncpy(newPtr->firstname,(*headPtr)->firstname,20);
	strncpy(newPtr->lastname,(*headPtr)->lastname,30);
	strncpy(newPtr->address,(*headPtr)->address,100);
	newPtr->age=(*headPtr)->age;
	newPtr->gender=(*headPtr)->gender;
	newPtr->lstatus=(*headPtr)->lstatus;
	newPtr->type=(*headPtr)->type;
	newPtr->amount=(*headPtr)->amount;
	strncpy(newPtr->duration,(*headPtr)->duration,30);
	newPtr->next=*topPtr;
	*topPtr=newPtr;
	printf("\n\nThe customers waiting to be updated are:\n\n");
	printf("%10s  |%5s  |%5s  |%5s  |%10s  |%10s\n\n","NIC","CSTMR_ID","STATUS","TYPE","AMOUNT","DURATION");
	printf("--------------------------------------------------------------------------------\n");
	printList(*topPtr); 
	tempPtr = *headPtr;
	*headPtr = ( *headPtr )->next;
	
	if(*headPtr==NULL)
		*tailPtr=NULL;
	free(tempPtr);
	}
	else
		printf("No memory available on stack!");

	}


	}	

	void updatestatus(regApPt *topPtr,customerPtr *sPtr){

	customerPtr currentPtr;
	customerPtr previousPtr;
	regApPt tempPtr;

	char decision;
	printf("\n\nThe customers waiting to be updated are:\n\n");
	printf("%10s  |%5s  |%5s  |%5s  |%10s  |%10s\n\n","NIC","CSTMR_ID","STATUS","TYPE","AMOUNT","DURATION");
	printf("--------------------------------------------------------------------------------\n");
	printList(*topPtr);
	printf("Update customer records? Y to update/CNTL+Z to exit: ");
	while((decision=getchar())!=EOF){
		switch(decision){
		case 'Y':
		case 'y':
				if((*topPtr)->cusID==(*sPtr)->cusID){

				(*sPtr)->lstatus=(*topPtr)->lstatus;
				tempPtr=*topPtr;
				*topPtr = ( *topPtr )->next;
				free(tempPtr);
				printf("\n\nThe customers waiting to be updated are:\n\n");
				printf("%10s  |%5s  |%5s  |%5s  |%10s  |%10s\n\n","NIC","CSTMR_ID","STATUS","TYPE","AMOUNT","DURATION");
				printf("--------------------------------------------------------------------------------\n");
				printList(*topPtr);
				printf("\n\nThe updated records are:\n\n");
				printf("%10s  |%5s  |%5s  |%5s  |%10s  |%10s\n\n","NIC","CSTMR_ID","STATUS","TYPE","AMOUNT","DURATION");
				printf("--------------------------------------------------------------------------------\n");
				printListCmplt(*sPtr);
				printf("\nUpdate customer records? Y to update/CNTL+Z to exit: ");
				}

		else{
		previousPtr=*sPtr;
		currentPtr=(*sPtr)->nextPtr;

		while(currentPtr!=NULL && currentPtr->cusID !=( *topPtr ) ->cusID){
		previousPtr=currentPtr;
		currentPtr=currentPtr->nextPtr;
		}
		if(currentPtr != NULL){
		
		currentPtr->lstatus=( *topPtr )->lstatus;
		tempPtr=*topPtr;
		*topPtr = ( *topPtr )->next;
		free(tempPtr);
			printf("\n\nThe customers waiting to be updated are:\n\n");
			printf("%10s  |%5s  |%5s  |%5s  |%10s  |%10s\n\n","NIC","CSTMR_ID","STATUS","TYPE","AMOUNT","DURATION");
			printf("--------------------------------------------------------------------------------\n");
			printList(*topPtr);
			printf("\n\nThe updated records are:\n\n");
			printf("%10s  |%5s  |%5s  |%5s  |%10s  |%10s\n\n","NIC","CSTMR_ID","STATUS","TYPE","AMOUNT","DURATION");
			printf("--------------------------------------------------------------------------------\n");
			printListCmplt(*sPtr);
			printf("\nUpdate customer records? Y to update/CNTL+Z to exit: ");
			}
		else
			printf("\nInvalid ID!\n\n");
		}
		break;


		case '\n':
		case '\t':
		case ' ':
		break;

		default:
			printf("Invalid decision!\n");
			break;
		
		}
	}
	
	}

void viewCustomer(customerPtr *sPtr, int id){

	customerPtr currentPtr;
	customerPtr previousPtr;

	if(id==(*sPtr)->cusID){
		printf("\n\n%5s   |  %s  |  %s   |%10s |  %5s  | %2s  | %5s  |%5s  |\n" ,"NIC","FNAME","LNAME","ADDRESS","GENDER","AGE","CSTMRID","STATUS");
		printf("--------------------------------------------------------------------------------");
		printf("%d |%10s |%10s  |%10s  |%d  |%2c  |%d  |%2c  |\n", (*sPtr)->nic,(*sPtr)->firstname,(*sPtr)->lastname,(*sPtr)->address,(*sPtr)->age,(*sPtr)->gender,(*sPtr)->cusID,(*sPtr)->lstatus);			 

	}

	else{
		previousPtr=*sPtr;
		currentPtr=(*sPtr)->nextPtr;

		while(currentPtr!=NULL && currentPtr->cusID != id){
		previousPtr=currentPtr;
		currentPtr=currentPtr->nextPtr;
		}
		if(currentPtr != NULL){
		printf("\n\n%5s   |  %s  |  %s   |%10s |  %5s  | %2s  | %5s  |%5s  |\n" ,"NIC","FNAME","LNAME","ADDRESS","GENDER","AGE","CSTMRID","STATUS");
		printf("--------------------------------------------------------------------------------");
		 printf( "%d |%10s |%10s  |%10s  |%d  |%2c  |%d  |%2c  |\n", currentPtr->nic,currentPtr->firstname,currentPtr->lastname,currentPtr->address,currentPtr->age,currentPtr->gender,currentPtr->cusID,currentPtr->lstatus);
		
			}
		
		}


}

int linearSearch(const int array[],int key,int size){
	int n;
	for(n=0;n<size;n++){
		if(array[n]==key)
			return n;
	}

	return -1;
}

void bubbleSort( int a[],int size){

	int pass,i,hold;
	for ( pass = 1; pass < size; pass++ ) {
/* loop to control number of comparisons per pass */
		for ( i = 0; i < size - 1; i++ ) {
/* compare adjacent elements and swap them if first
element is greater than second element */
		if ( a[ i ] < a[ i + 1 ] ) {
				hold = a[ i ];
				a[ i ] = a[ i + 1 ];
				a[ i + 1 ] = hold;
				} /* end if */
		} /* end inner for */
	}

}

int isEmpty( customerPtr sPtr )
	{
	return sPtr == NULL;
	}

int isEmptyQueue( loanApply headPtr )
	{
	return headPtr == NULL;
	}

void printList( customerPtr currentPtr ){
	if ( currentPtr == NULL ) {

		printf( "No customer records available at the moment.\n\n" );

	}

	else {
		

		while ( currentPtr != NULL ) {
			printf( "%2d |%5s |%5s  |%7s  |%3c  |%3d  |%3d  |%2c|\n", currentPtr->nic,currentPtr->firstname,currentPtr->lastname,currentPtr->address,currentPtr->gender,currentPtr->age,currentPtr->cusID,currentPtr->lstatus);
			 currentPtr = currentPtr->nextPtr;
			} 
		printf( "\n\n" );
 }

}
void printListDlt( customerPtr currentPtr ){
	if ( currentPtr == NULL ) {

		printf( "No customer records available at the moment.\n\n" );

	}

	else {
		

		while ( currentPtr != NULL ) {
			printf( "%15d |%15s |%20s  |%10d |%5c\n", currentPtr->nic,currentPtr->firstname,currentPtr->lastname,currentPtr->cusID,currentPtr->lstatus);
			 currentPtr = currentPtr->nextPtr;
			} 
		printf( "\n\n" );
 }

}
void printAll( customerPtr currentPtr ){
	if ( currentPtr == NULL ) {

		printf( "No customer records available at the moment.\n\n" );

	}

	else {


		while ( currentPtr != NULL ) {
			printf( "%10d |%30s   |%30s   |\n", currentPtr->cusID,currentPtr->firstname,currentPtr->lastname);
			 currentPtr = currentPtr->nextPtr;
			} 
		printf( "\n\n" );
 }

}
void printListCmplt( customerPtr currentPtr ){
	if ( currentPtr == NULL ) {

		printf( "No customer records available at the moment.\n\n" );

	}

	else {
		
	
		while ( currentPtr != NULL ) {
			printf( "%10d |%8d  |%5c  |%5c  |%10.2f  |%10s\n", currentPtr->nic,currentPtr->cusID,currentPtr->lstatus,currentPtr->type,currentPtr->amount,currentPtr->duration);
			 currentPtr = currentPtr->nextPtr;
			} 
		printf( "\n\n" );
 }

}
void printList( regApPt currentPtr ){
	if ( currentPtr == NULL ) {

		printf( "No records awaiting approval.\n\n" );

	}

	else {
	

		while ( currentPtr != NULL ) {
			printf( "%10d |%8d  |%5c  |%5c  |%10.2f  |%10s\n", currentPtr->nic,currentPtr->cusID,currentPtr->lstatus,currentPtr->type,currentPtr->amount,currentPtr->duration);
			 currentPtr = currentPtr->next;
			} 
		printf( "\n\n" );
 }

}
void printList( loanApply currentPtr ){
	if ( currentPtr == NULL ) {

		printf( "No pending customers.\n\n\n" );

	}

	else {
	

		while (  currentPtr != NULL ) {
			 printf(  "%10d |%8d  |%5c  |%5c  |%10.2f  |%10s\n", currentPtr->nic,currentPtr->cusID,currentPtr->lstatus,currentPtr->type,currentPtr->amount,currentPtr->duration);
			 currentPtr = currentPtr->next;
			} 
		printf( "\n\n" );
 }

	

}
void printApproved(customerPtr currentPtr){
	if ( currentPtr == NULL ) {

		printf( "No records available.\n\n" );

	}
	else{
	
	while (currentPtr!=NULL) {
		if(currentPtr->lstatus=='A'){
			printf( "%10d |%20s |%20s  |%20.2f  \n", currentPtr->cusID,currentPtr->firstname,currentPtr->lastname,currentPtr->amount);
		}
			 currentPtr = currentPtr->nextPtr;
			} 
		printf( "\n\n" );
	}
	
	}
void printRejected(customerPtr currentPtr){
	
	if ( currentPtr == NULL ) {

		printf( "No records available.\n\n\n" );

	}
	else{
		
	while ( currentPtr!=NULL) {
		if(currentPtr->lstatus=='R'){
			printf( "%10d |%20s |%20s  |%20.2f  \n", currentPtr->cusID,currentPtr->firstname,currentPtr->lastname,currentPtr->amount);	 
			}
		currentPtr = currentPtr->nextPtr;
			} 
		printf( "\n\n" );
	
	}
	}
void printPending(customerPtr currentPtr){
	if ( currentPtr == NULL ) {

		printf( "No records available.\n\n\n" );

	} 
	else{
	while ( currentPtr!=NULL) {
		if(currentPtr->lstatus =='P')
			printf( "%10d |%20s |%20s  |%20.2f  \n", currentPtr->cusID,currentPtr->firstname,currentPtr->lastname,currentPtr->amount);
			 currentPtr = currentPtr->nextPtr;
			} 
		printf( "\n\n" );
	}
	
	}


void printArray(int a[]){

	int k;
	for(k=0;k<100;k++){
			
				printf("%d\t\t",a[k]);
			
			}
			printf("\n");

}

int binarySearch(const int a[],int key,int low,int high){

	int middle;

	while(low<=high){
	
		middle=(low+high)/2;
		if(key==a[middle])
			return middle;
		else if(key<a[middle])
			low=middle+1;
		else
			high=middle-1;
	}

	return -1;
	
	
	}


